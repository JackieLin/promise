// Generated by CoffeeScript 1.10.0

/*
 * promise 信息
 * @author jackie Lin <dashi_lin@163.com>
 * @date 2016-3-9
 */
(function(window) {

  /*
   * promise list
   */
  var Promise, bind, getPrevPromise, init, promises;
  promises = [];
  Promise = function(cb) {
    if (cb == null) {
      cb = function() {};
    }
    init();
    this._cb = cb;

    /*
     * 0 - pending
     * 1 - fulfilled with _value
     * 2 - rejected with _value
     * 3 - adopted the state of another promise, _value
     */
    this._status = 0;
    this._value = null;
    this._deferred = [];
    promises.push(this);
    return this._cb.apply(null, [this.resolve.bind(this), this.reject.bind(this)]);
  };

  /*
   * 绑定方法到对应的上下文
   */
  bind = function(context) {
    var aArgs, fToBind, warpperFunc;
    if (context == null) {
      context = this;
    }
    if (this !== 'function') {
      throw new TypeError('绑定对象应该是一个方法');
    }
    aArgs = Array.prototype.slice.call(arguments, 1);
    fToBind = this;
    warpperFunc = function() {
      return fToBind.apply(context, aArgs.concat(Array.prototype.slice.call(arguments)));
    };
    return warpperFunc;
  };
  init = function() {
    this._status = 0;
    this._value = null;
    if (!Function.prototype.bind) {
      return Function.prototype.bind = bind;
    }
  };

  /*
   * 执行  then 队列
   */
  Promise.prototype.resolve = function(res) {
    this._status = 1;
    this._value = res;
    this.run();
    return this;
  };
  Promise.prototype.reject = function() {
    this._status = 2;
    this._value = res;
    return this;
  };

  /*
   * 执行 then
   */
  Promise.prototype.doThen = function() {
    var _value;
    if (!this._deferred.length) {
      return;
    }
    if (this._deferred.length && this._status === 1) {
      _value = this._deferred.shift().apply(this, [this._value]);
      if (_value instanceof Promise) {
        return this._status = 3;
      } else {
        this._value = _value;
        return this.doThen();
      }
    }
  };
  Promise.prototype.run = function() {
    this.doThen();
    if (this._done) {
      return this.doDone(this._done);
    }
  };
  getPrevPromise = function() {
    var length, prev;
    length = promises.length;
    prev = null;
    if (length > 1) {
      prev = promises[length - 2];
    }
    return prev;
  };

  /*
   * 将对应的值同步到上一个空间
   */
  Promise.prototype.notify = function() {
    var prev;
    prev = getPrevPromise();
    if (prev) {
      return prev._value = this._value;
    }
  };
  Promise.prototype.doDone = function(done) {
    var prev;
    this._value = done.apply(this, [this._value]);
    this.notify();
    promises.pop();
    if (promises.length) {
      prev = promises[promises.length - 1];
      prev._status = 1;
      return prev.run();
    }
  };

  /*
   * 结束
   */
  Promise.prototype.donePromise = function(cb) {
    var ref;
    if ((ref = this._status) === 0 || ref === 3) {
      this._done = cb;
    }
    if (this._status === 1) {
      this.doThen();
      this.doDone(cb);
    }
    return this;
  };
  Promise.prototype.thenPromise = function(cb) {
    var ref;
    if ((ref = this._status) === 0 || ref === 1 || ref === 3) {
      this._deferred.push(cb);
    }
    return this;
  };
  if (!window.define) {
    return window.Promise = Promise;
  }
  if (window.define) {
    return window.define(function() {
      return Promise;
    });
  }
})(window);
